// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/* Instruction format:
    0ddd dddd dddd dddd -- Load imm. into A
    111a cccc ccdd djjj -- Comp instruction 
        a = 0: register op.
        a = 1: mem. op.
*/  

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /* --- A Register --- */
    ARegister(in=Ain, load=Aload, out=Aout, out[0..14]=addressM);
    // instruction[5] (d2) selects A as a destination.
    // instruction[15], if clear, loads an immediate into A.
    // Load:
    Not(in=instruction[15], out=nlimm);
    Or(a=nlimm, b=instruction[5], out=Aload);
    // Data:
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Ain);

    /* --- D Register --- */
    DRegister(in=ALUout, load=Dload, out=Dout);
    // If instruction[15]=1 (comp. op.), instruction[4] (d1) selects D as a destination.
    And(a=instruction[4], b=instruction[15], out=Dload);
    // (Only the ALU can write into D.)


    /* --- ALU --- */
    // ALUin0 (x) is the D register. 
    // ALUin1 (y) is either the A register or inM[] 
    // (determined by instruction[12] = a).
    Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUin1);
    
    ALU(x=Dout, y=ALUin1, 
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=ALUout, out=outM, 
        zr=ALUz, 
        ng=ALUn);


    /* --- Jump Logic --- */
    // if comp. op. (a=1) => jump = j2*N + j1*Z + j0*!N*!Z
    // (From minimizing the truth table of variables j2, j1, j0, ALUn and ALUz).
    And(a=instruction[2], b=ALUn, out=jl0);
    And(a=instruction[1], b=ALUz, out=jl1);
    Or(a=jl0, b=jl1, out=jl2);

    Not(in=ALUz, out=nALUn);
    Not(in=ALUn, out=nALUz);
    And(a=instruction[0], b=nALUz, out=jl3);
    And(a=jl3, b=nALUn, out=jl4);
    
    Or(a=jl2, b=jl4, out=jl5);
    And(a=instruction[15], b=jl5, out=jump);


    /* --- Program Counter --- */
    PC(in=Aout, load=jump, inc=true, reset=reset, out[0..14]=pc);

    /* --- RAM Write Enable --- */
    // Determined by d0 (instruction[3]) but only if it is not a ADDR 
    // instruction (i.e. instruction[15] == 1).
    And(a=instruction[3], b=instruction[15], out=writeM);
}