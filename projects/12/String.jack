// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

    field int data;
    field int length;
    field int max_length;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let data = Memory.alloc(maxLength);
        }
        else {
            let data = 0;
        }
        let length = 0;
        let max_length = maxLength;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        if (max_length > 0) {
            do Memory.deAlloc(data);
        }
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return data[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        let data[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        let data[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int i, res;
        let res = 0;

        if (data[0] = 45) { // ascii('-') == 45 => Negative number.
            let i = 1;      // (Skipping sign.)
        } else {
            let i = 0;
        }

        while (i < length) {
            let res = (10 * res) + (data[i] - 48);
            let i = i + 1;
        }

        if (data[0] = 45) {
            return -res;
        }
        return res;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        if (number < 0) {
            let data[0] = 45; // ascii('-') == 45
            let length = 1;
            do setIntHelper(-number);
        }
        else {
            let length = 0;
            do setIntHelper(number);
        }

        return;
    }

    method void setIntHelper(int number) {
        var int last_digit, c;
        let last_digit = number - (10*(number/10)); // number % 10
        let c = last_digit + 48;

        if (number < 10) {
            let data[length] = c;
            let length = length + 1;
        }
        else {
            do setIntHelper(number/10);
            do appendChar(c);
        }

        return;

    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
